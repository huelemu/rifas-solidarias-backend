// test-auth.js - Script completo para probar autenticaci√≥n
// Ejecutar con: node test-auth.js

const BASE_URL = 'http://localhost:3100';

// Funci√≥n helper para hacer requests
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.json();
    return { response, data, status: response.status };
  } catch (error) {
    console.error(`‚ùå Error en request a ${url}:`, error.message);
    throw error;
  }
}

async function testAuthSystem() {
  console.log('üîê =======================================');
  console.log('   TESTING SISTEMA DE AUTENTICACI√ìN');
  console.log('üîê =======================================\n');

  let accessToken = null;
  let refreshToken = null;
  let testUser = null;

  try {
    // 1. Test de configuraci√≥n inicial
    console.log('1Ô∏è‚É£ Verificando configuraci√≥n del servidor...');
    const { data: serverInfo } = await makeRequest(`${BASE_URL}/`);
    console.log('‚úÖ Servidor:', serverInfo.mensaje);

    const { data: jwtConfig } = await makeRequest(`${BASE_URL}/test-jwt`);
    console.log('‚úÖ JWT configurado:', jwtConfig.status);
    if (jwtConfig.warnings?.length > 0) {
      console.log('‚ö†Ô∏è  Warnings:', jwtConfig.warnings.join(', '));
    }

    // 2. Test de base de datos
    console.log('\n2Ô∏è‚É£ Verificando base de datos...');
    const { data: dbInfo } = await makeRequest(`${BASE_URL}/test-db`);
    console.log('‚úÖ Base de datos:', dbInfo.status);
    console.log('‚úÖ Tablas auth:', Object.entries(dbInfo.auth_tables)
      .map(([table, exists]) => `${table}: ${exists ? '‚úÖ' : '‚ùå'}`)
      .join(', ')
    );

    // 3. Test de registro con datos inv√°lidos
    console.log('\n3Ô∏è‚É£ Probando validaciones de registro...');
    
    // Registro sin datos requeridos
    const { status: invalidStatus } = await makeRequest(`${BASE_URL}/auth/register`, {
      method: 'POST',
      body: JSON.stringify({ email: 'test@test.com' })
    });
    console.log(`‚úÖ Validaci√≥n campos requeridos: ${invalidStatus === 400 ? 'OK' : 'FAIL'}`);

    // Email inv√°lido
    const { status: emailStatus } = await makeRequest(`${BASE_URL}/auth/register`, {
      method: 'POST',
      body: JSON.stringify({
        nombre: 'Test',
        apellido: 'User',
        email: 'email-invalido',
        password: 'test123'
      })
    });
    console.log(`‚úÖ Validaci√≥n email: ${emailStatus === 400 ? 'OK' : 'FAIL'}`);

    // 4. Registro exitoso
    console.log('\n4Ô∏è‚É£ Registrando usuario de prueba...');
    const userData = {
      nombre: 'Test',
      apellido: 'Auth',
      email: `testauth${Date.now()}@ejemplo.com`,
      password: 'test123456',
      telefono: '+5491123456789',
      rol: 'comprador'
    };

    const { data: registerResult, status: regStatus } = await makeRequest(`${BASE_URL}/auth/register`, {
      method: 'POST',
      body: JSON.stringify(userData)
    });

    if (regStatus === 201) {
      console.log('‚úÖ Usuario registrado:', registerResult.data.user.email);
      testUser = registerResult.data.user;
      accessToken = registerResult.data.tokens.access_token;
      refreshToken = registerResult.data.tokens.refresh_token;
      console.log('‚úÖ Tokens recibidos: access y refresh');
    } else {
      throw new Error(`Error en registro: ${registerResult.message}`);
    }

    // 5. Test de login con credenciales incorrectas
    console.log('\n5Ô∏è‚É£ Probando login con credenciales incorrectas...');
    const { status: wrongPassStatus } = await makeRequest(`${BASE_URL}/auth/login`, {
      method: 'POST',
      body: JSON.stringify({
        email: userData.email,
        password: 'password_incorrecto'
      })
    });
    console.log(`‚úÖ Login credenciales incorrectas: ${wrongPassStatus === 401 ? 'OK' : 'FAIL'}`);

    // 6. Login exitoso
    console.log('\n6Ô∏è‚É£ Probando login exitoso...');
    const { data: loginResult, status: loginStatus } = await makeRequest(`${BASE_URL}/auth/login`, {
      method: 'POST',
      body: JSON.stringify({
        email: userData.email,
        password: userData.password
      })
    });

    if (loginStatus === 200) {
      console.log('‚úÖ Login exitoso:', loginResult.data.user.email);
      console.log('‚úÖ Nuevo access token recibido');
      accessToken = loginResult.data.tokens.access_token;
      refreshToken = loginResult.data.tokens.refresh_token;
    } else {
      throw new Error(`Error en login: ${loginResult.message}`);
    }

    // 7. Test de ruta protegida sin token
    console.log('\n7Ô∏è‚É£ Probando ruta protegida sin token...');
    const { status: noTokenStatus } = await makeRequest(`${BASE_URL}/auth/me`);
    console.log(`‚úÖ Sin token: ${noTokenStatus === 401 ? 'OK' : 'FAIL'}`);

    // 8. Test de ruta protegida con token inv√°lido
    console.log('\n8Ô∏è‚É£ Probando ruta protegida con token inv√°lido...');
    const { status: badTokenStatus } = await makeRequest(`${BASE_URL}/auth/me`, {
      headers: { 'Authorization': 'Bearer token_invalido' }
    });
    console.log(`‚úÖ Token inv√°lido: ${badTokenStatus === 401 ? 'OK' : 'FAIL'}`);

    // 9. Test de ruta protegida con token v√°lido
    console.log('\n9Ô∏è‚É£ Probando ruta protegida con token v√°lido...');
    const { data: profileResult, status: profileStatus } = await makeRequest(`${BASE_URL}/auth/me`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });

    if (profileStatus === 200) {
      console.log('‚úÖ Perfil obtenido:', profileResult.data.email);
      console.log('‚úÖ Datos incluyen instituci√≥n:', profileResult.data.institucion_nombre || 'Sin instituci√≥n');
    } else {
      throw new Error(`Error obteniendo perfil: ${profileResult.message}`);
    }

    // 10. Test de refresh token
    console.log('\nüîü Probando renovaci√≥n de token...');
    const { data: refreshResult, status: refreshStatus } = await makeRequest(`${BASE_URL}/auth/refresh`, {
      method: 'POST',
      body: JSON.stringify({ refresh_token: refreshToken })
    });

    if (refreshStatus === 200) {
      console.log('‚úÖ Token renovado exitosamente');
      accessToken = refreshResult.data.access_token;
    } else {
      throw new Error(`Error renovando token: ${refreshResult.message}`);
    }

    // 11. Test de logout
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Probando cierre de sesi√≥n...');
    const { data: logoutResult, status: logoutStatus } = await makeRequest(`${BASE_URL}/auth/logout`, {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${accessToken}` },
      body: JSON.stringify({ refresh_token: refreshToken })
    });

    if (logoutStatus === 200) {
      console.log('‚úÖ Logout exitoso:', logoutResult.message);
    } else {
      console.log('‚ö†Ô∏è  Logout con advertencias:', logoutResult.message);
    }

    // 12. Verificar que el token fue invalidado
    console.log('\n1Ô∏è‚É£2Ô∏è‚É£ Verificando invalidaci√≥n de token...');
    const { status: invalidatedStatus } = await makeRequest(`${BASE_URL}/auth/me`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    console.log(`‚úÖ Token invalidado: ${invalidatedStatus === 401 ? 'OK' : 'FAIL'}`);

    // 13. Test de m√∫ltiples intentos fallidos
    console.log('\n1Ô∏è‚É£3Ô∏è‚É£ Probando protecci√≥n contra ataques de fuerza bruta...');
    for (let i = 1; i <= 6; i++) {
      const { status } = await makeRequest(`${BASE_URL}/auth/login`, {
        method: 'POST',
        body: JSON.stringify({
          email: userData.email,
          password: 'password_incorrecto'
        })
      });
      
      if (i <= 5) {
        console.log(`   Intento ${i}/5: ${status === 401 ? 'Bloqueado correctamente' : 'Error'}`);
      } else {
        console.log(`‚úÖ Protecci√≥n fuerza bruta: ${status === 423 ? 'Usuario bloqueado OK' : 'FAIL'}`);
      }
    }

    console.log('\nüéâ =======================================');
    console.log('   ¬°TODOS LOS TESTS PASARON EXITOSAMENTE!');
    console.log('üéâ =======================================');
    
    console.log('\nüìä RESUMEN DE FUNCIONALIDADES PROBADAS:');
    console.log('‚úÖ Registro de usuarios con validaciones');
    console.log('‚úÖ Login con autenticaci√≥n JWT');
    console.log('‚úÖ Protecci√≥n de rutas con middleware');
    console.log('‚úÖ Renovaci√≥n de tokens (refresh)');
    console.log('‚úÖ Cierre de sesi√≥n e invalidaci√≥n');
    console.log('‚úÖ Protecci√≥n contra fuerza bruta');
    console.log('‚úÖ Validaciones de datos de entrada');
    console.log('‚úÖ Manejo de errores y c√≥digos HTTP');

  } catch (error) {
    console.error('\n‚ùå =======================================');
    console.error('   ERROR EN LOS TESTS');
    console.error('‚ùå =======================================');
    console.error('Error:', error.message);
    console.error('Stack:', error.stack);
    
    console.log('\nüîß POSIBLES SOLUCIONES:');
    console.log('1. Verificar que el servidor est√© ejecut√°ndose en puerto 3100');
    console.log('2. Ejecutar la migraci√≥n de base de datos: database/migrations/002_add_auth_fields.sql');
    console.log('3. Verificar configuraci√≥n de variables de entorno en .env');
    console.log('4. Instalar dependencias: npm install jsonwebtoken bcrypt');
  }
}

// Funci√≥n para limpiar datos de test (opcional)
async function cleanupTestData() {
  console.log('\nüßπ Limpiando datos de test...');
  try {
    // Aqu√≠ podr√≠as agregar l√≥gica para limpiar usuarios de test
    // Por ejemplo, eliminar usuarios cuyo email contenga 'testauth'
    console.log('‚úÖ Cleanup completado');
  } catch (error) {
    console.log('‚ö†Ô∏è  Error en cleanup:', error.message);
  }
}

// Ejecutar tests
console.log('Iniciando tests de autenticaci√≥n...\n');
testAuthSystem()
  .then(() => {
    console.log('\n‚ú® Tests completados exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Tests fallaron:', error.message);
    process.exit(1);
  });